---
apiVersion: v1
data:
  script: "#!/bin/sh\nset -euo pipefail\n\n# gracefully handle the TERM signal sent\
    \ when deleting the daemonset\ntrap 'exit' TERM\n\n# do the work\napk add curl\n\
    \nk8s_url=\"https://storage.googleapis.com/kubernetes-release/release\"\nstable_k8s_version=\"\
    $( curl -s \"$k8s_url/stable.txt\" )\"\nkubectl_url=\"$k8s_url/$stable_k8s_version/bin/linux/amd64/kubectl\"\
    \n\nk8s_secret_dir=\"/run/secrets/kubernetes.io/serviceaccount\"\ncacert=\"$k8s_secret_dir/ca.crt\"\
    \nnamespace=\"$( cat \"$k8s_secret_dir/namespace\" )\"\ntoken=\"$( cat \"$k8s_secret_dir/token\"\
    \ )\"\n\ncurl -sLO \"$kubectl_url\"\nchmod +x ./kubectl\n\nif ./kubectl auth can-i\
    \ get pods -n \"$namespace\" &> /dev/null ; then\n    if ./kubectl auth can-i\
    \ patch nodes --all-namespaces &> /dev/null ; then\n        endpoint_prefix=\"\
    https://${KUBERNETES_SERVICE_HOST}\"\n        endpoint_prefix=\"${endpoint_prefix}:${KUBERNETES_SERVICE_PORT}\"\
    \n\n        while sleep 5 ; do\n            for node in \\\n                $(\
    \ ./kubectl get nodes -o \\\n                    jsonpath='{.items[*].metadata.name}'\
    \ )\n            do\n                # PATCH the node entry (must be done through\
    \ REST API,\n                # because nodes are read-only when using kubectl)\n\
    \                endpoint=\"${endpoint_prefix}/api/v1/nodes/${node}/status\"\n\
    \n                if curl -s -S \\\n                        --request PATCH \\\
    \n                        --header \\\n                            \"Content-Type:\
    \ application/json-patch+json\" \\\n                        --header \"Authorization:\
    \ Bearer $token\" \\\n                        --cacert \"$cacert\" \\\n      \
    \                  --data '[{\n                            \"op\": \"add\",\n\
    \                            \"path\": \"/status/capacity/spack.io~1node-share\"\
    ,\n                            \"value\": \"1Gi\"\n                        }]'\
    \ \\\n                        \"$endpoint\" > /dev/null\n                then\n\
    \                    true\n                else\n                    echo \"Error:\
    \ node patch failed for $node\" >&2\n                fi\n            done\n  \
    \      done\n    else\n        echo \"Error: not authorized to patch nodes\" >&2\n\
    \    fi\nelse\n    echo \"Error: not authorized to query pods in namespace '$namespace'\"\
    \ >&2\nfi\n"
kind: ConfigMap
metadata:
  name: node-share-controller-script
  namespace: custom
