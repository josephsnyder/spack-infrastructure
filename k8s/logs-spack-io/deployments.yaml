---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: logs-spack-io-redirect
  namespace: logs-spack-io
  labels:
    app: logs-spack-io
    svc: web-redirect
    environment: matomo

spec:
  selector:
    matchLabels:
      app: logs-spack-io
      svc: web-redirect
      environment: matomo
  replicas: 2
  template:
    metadata:
      labels:
        app: logs-spack-io
        svc: web-redirect
        environment: matomo
    spec:
      containers:
      - name: matomo-nginx
        imagePullPolicy: Always
        image: "nginx:alpine"
        command: ["nginx", "-g", "daemon off;", "-c", "/config/nginx.conf"]
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Gi
        ports:
          - name: http
            containerPort: 80
            protocol: TCP
        volumeMounts:
          - mountPath: /config/nginx.conf
            name: config
            subPath: nginx.conf
          - mountPath: /var/www/html
            name: html-files
        env:
        - name: MOUNT_PATH
          value: "/data"
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: spack-aws-credentials
              key: aws_access_key_id
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: spack-aws-credentials
              key: aws_secret_access_key        
      - name: matomo
        image: matomo:3.14.1-fpm-alpine
        env:
        - name: MATOMO_DATABASE_HOST
          valueFrom:
            secretKeyRef:
              name: logs-spack-io-secrets
              key: mysql_host
        - name: MATOMO_DATABASE_USERNAME
          valueFrom:
            secretKeyRef:
              name: logs-spack-io-secrets
              key: mysql_user
        - name: MATOMO_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: logs-spack-io-secrets
              key: mysql_password
        - name: MATOMO_DATABASE_DBNAME
          valueFrom:
            secretKeyRef:
              name: logs-spack-io-secrets
              key: mysql_database
        - name: MATOMO_DATABASE_ADAPTER
          value: mysql
        - name: MATOMO_DATABASE_TABLES_PREFIX
          valueFrom:
            secretKeyRef:
              name: logs-spack-io-secrets
              key: matomo_database_tables_prefix
        resources:
          requests:
            cpu: 1000m
            memory: 8Gi
          limits:
            cpu: 1000m
            memory: 8Gi
        ports:
        - name: http
          containerPort: 9000
        volumeMounts:
        - mountPath: /usr/local/etc/php/conf.d/php-special.ini
          name: config
          subPath: php.ini
        - mountPath: /var/www/html
          name: html-files
        - mountPath: /data
          name: migration-logs
      - image: mysql:8.0
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: logs-spack-io-secrets
              key: mysql_root_password
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: logs-spack-io-secrets
              key: mysql_database
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: logs-spack-io-secrets
              key: mysql_user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: logs-spack-io-secrets
              key: mysql_password
        ports:
        - containerPort: 3306
          name: mysql

        # Important - this is recommended to be 500GB SSD - can we do that?
        volumeMounts:
        - name: matomo-db
          mountPath: /var/lib/mysql
        - name: matomo-configmap
          mountPath: /etc/mysql/conf.d/more.cnf
          subPath: more.cnf
        livenessProbe: 
          initialDelaySeconds: 10
          timeoutSeconds: 10
          periodSeconds: 30
          failureThreshold: 5
          tcpSocket:
            port: mysql
        readinessProbe: 
          initialDelaySeconds: 20
          timeoutSeconds: 10
          periodSeconds: 30
          failureThreshold: 5
          tcpSocket:
            port: mysql
        resources:
          limits:
            cpu: "3.0"
            memory: "3Gi"
          requests:
            cpu: "0.25"
            memory: "250Mi"
      volumes:
      - name: config
        configMap:
          name: matomo-config

      # TODO how do we update this for a filesystem?
      - name: html-files
        cephfs:
          monitors:
          - 192.168.0.1
          path: /matomo
          user: admin
          secretRef:
            name: logs-spack-io-secrets
            key: logs-spack-io-secrets
          readOnly: false
      nodeSelector:
        "beta.kubernetes.io/instance-type": "t2.2xlarge"


---
apiVersion: v1
kind: ConfigMap
metadata:
  name: matomo-config
  labels:
    app: matomo
    environment: matomo
data:
  nginx.conf: |
    # nginx.conf for php
    events {
      worker_connections 768;
    }
    http {
      upstream backend {
        server localhost:9000;
      }
      include /etc/nginx/mime.types;
      default_type application/octet-stream;
      gzip on;
      gzip_disable "msie6";
      # If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
      # scheme used to connect to this server
      map $http_x_forwarded_proto $proxy_x_forwarded_proto {
        default $http_x_forwarded_proto;
        ''      $scheme;
      }
      # If we receive X-Forwarded-Port, pass it through; otherwise, pass along the
      # server port the client connected to
      map $http_x_forwarded_port $proxy_x_forwarded_port {
        default $http_x_forwarded_port;
        ''      $server_port;
      }
      # If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
      # Connection header that may have been passed to this server
      map $http_upgrade $proxy_connection {
        default upgrade;
        '' close;
      }
      # Set appropriate X-Forwarded-Ssl header
      map $scheme $proxy_x_forwarded_ssl {
        default off;
        https on;
      }
      # HTTP 1.1 support
      proxy_http_version 1.1;
      proxy_buffering off;
      proxy_set_header Host $http_host;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $proxy_connection;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
      proxy_set_header X-Forwarded-Ssl $proxy_x_forwarded_ssl;
      proxy_set_header X-Forwarded-Port $proxy_x_forwarded_port;
      proxy_set_header Proxy "";
      server {
        listen 80;
        root /var/www/html/;
        index index.php index.html index.htm;
        location / {
          try_files $uri $uri/ =404;
        }
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
          root /usr/share/nginx/html;
        }
        location = /favicon.ico {
          log_not_found off;
          access_log off;
        }
        location ~ \.php$ {
          fastcgi_param  GATEWAY_INTERFACE  CGI/1.1;
          fastcgi_param  SERVER_SOFTWARE    nginx;
          fastcgi_param  QUERY_STRING       $query_string;
          fastcgi_param  REQUEST_METHOD     $request_method;
          fastcgi_param  CONTENT_TYPE       $content_type;
          fastcgi_param  CONTENT_LENGTH     $content_length;
          fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;
          fastcgi_param  SCRIPT_NAME        $fastcgi_script_name;
          fastcgi_param  REQUEST_URI        $request_uri;
          fastcgi_param  DOCUMENT_URI       $document_uri;
          fastcgi_param  DOCUMENT_ROOT      $document_root;
          fastcgi_param  SERVER_PROTOCOL    $server_protocol;
          fastcgi_param  REMOTE_ADDR        $remote_addr;
          fastcgi_param  REMOTE_PORT        $remote_port;
          fastcgi_param  SERVER_ADDR        $server_addr;
          fastcgi_param  SERVER_PORT        $server_port;
          fastcgi_param  SERVER_NAME        $server_name;
          fastcgi_intercept_errors on;
          fastcgi_pass backend;
        }
      }
    }
  php.ini: |
    memory_limit=1536M
    max_execution_time=1440


---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: matomo-archive

spec:
  schedule: "*/30 * * * *"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: matomo-archive
            image: matomo:3.14.1-fpm-alpine
            command: ["/usr/local/bin/php"]
            args: ["/var/www/html/console", "core:archive", "--url=https://logs.spack.io"]
            env:
            - name: MATOMO_DATABASE_HOST
              valueFrom:
                secretKeyRef:
                  name: logs-spack-io-secrets
                  key: mysql_host
            - name: MATOMO_DATABASE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: logs-spack-io-secrets
                  key: mysql_user
            - name: MATOMO_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: logs-spack-io-secrets
                  key: mysql_password
            - name: MATOMO_DATABASE_DBNAME
              valueFrom:
                secretKeyRef:
                  name: logs-spack-io-secrets
                  key: mysql_database
            - name: MATOMO_DATABASE_ADAPTER
              value: mysql
            - name: MATOMO_DATABASE_TABLES_PREFIX
              valueFrom:
                secretKeyRef:
                  name: logs-spack-io-secrets
                  key: matomo_database_tables_prefix
            resources:
              requests:
                cpu: 100m
                memory: 512Mi
              limits:
                cpu: 500m
                memory: 1Gi
            volumeMounts:
            - mountPath: /var/www/html
              name: html-files
          restartPolicy: OnFailure
          volumes:
          # These AWS EBS volume must already exist!
          - name: html-files
            awsElasticBlockStore:
              # Can this be from secrets too?
              volumeID: "volume-xxx"
              fsType: ext4         
          - name: migration-logs
            awsElasticBlockStore:
              # Can this be from secrets too?
              volumeID: "volume-xxx"
              fsType: ext4
